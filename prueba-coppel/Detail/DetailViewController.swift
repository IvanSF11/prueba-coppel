//
//  DetailViewController.swift
//  prueba-coppel
//
//  Created Pedro Soriano on 28/09/22.
//  Copyright © 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class DetailViewController: UIViewController, DetailViewProtocol {
    //MARK: Properties
	var presenter: DetailPresenterProtocol?
    let overlays = ViewOverlay()
    var detailDataTv: DetailTV?
    var detailMovies: DetailMovie?
    var TypeMovie: Bool?
    let today = Date()
    var itemHeight = 250.0
    var id: Int?
    
    lazy var profileImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.layer.cornerRadius = 8.0
        imageView.clipsToBounds = true
        imageView.translatesAutoresizingMaskIntoConstraints = false
        return imageView
    }()
    
    lazy var nameLabel: UILabel = {
        let label = UILabel()
        label.textColor = .labelColor
        label.font = UIFont.systemFont(ofSize: 15.0)
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    lazy var dateLabel: UILabel = {
        let label = UILabel()
        label.textColor = .labelColor
        label.font = UIFont.systemFont(ofSize: 15.0)
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    lazy var descriptionLabel: UITextView = {
        let textView = UITextView()
        textView.isEditable = false
        textView.isSelectable = false
        textView.backgroundColor = .clear
        textView.textColor = .white
        textView.font = UIFont.systemFont(ofSize: 14.0)
        textView.translatesAutoresizingMaskIntoConstraints = false
        return textView
    }()
    
    lazy var createdByLabel: UILabel = {
        let label = UILabel()
        label.textColor = .labelColor
        label.font = UIFont.systemFont(ofSize: 20.0)
        label.text = "Created by:"
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    lazy var collectionView: UICollectionView = {
        let viewLayout = UICollectionViewFlowLayout()
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: viewLayout)
        collectionView.backgroundColor = .backgColor
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        return collectionView
    }()

    // MARK: Life Cycle
	override func viewDidLoad() {
        super.viewDidLoad()
        startLoadingView()
        setConstraints()
        setCollectionView()
        view.backgroundColor = .backgColor
        guard let id = id else { return }
        TypeMovie == true ? presenter?.fetchMovie(id: id) : presenter?.fetchTV(id: id)
    }
    
    // MARK: Set CollectionView
    private func setCollectionView(){
        collectionView.dataSource = self
        collectionView.delegate = self
        collectionView.register(HomeCollectionViewCell.self, forCellWithReuseIdentifier: HomeCollectionViewCell.identifier)
    }
    
    // MARK: Response services
    func responseTvDetail(data: DetailTV){
        detailDataTv = data
        profileImageView.downloaded(from: data.posterURL, contentMode: .scaleToFill)
        nameLabel.text = data.name
        dateLabel.text = today.getDate(date: data.firstAirDate)
        descriptionLabel.text = data.overview
        collectionView.reloadData()
        finishLoadingView()
    }
    
    func responseMovieDetail(data: DetailMovie){
        detailMovies = data
        profileImageView.downloaded(from: data.posterURL, contentMode: .scaleToFill)
        nameLabel.text = data.title
        dateLabel.text = today.getDate(date: data.releaseDate)
        descriptionLabel.text = data.overview
        collectionView.reloadData()
        finishLoadingView()
    }
    
    func showError(title: String){
        finishLoadingView()
        showAlert(title: "warning", message: title)
    }
    
    //MARK: Show and Hiden Lottie
    func startLoadingView() {
        overlays.startLoadingView()
    }
    
    func finishLoadingView() {
        overlays.finishLoadingView()
    }
    
    // MARK: Add Constraints
    private func setConstraints(){
        view.addSubview(profileImageView)
        view.addSubview(nameLabel)
        view.addSubview(dateLabel)
        view.addSubview(descriptionLabel)
        view.addSubview(createdByLabel)
        view.addSubview(collectionView)
        overlays.translatesAutoresizingMaskIntoConstraints = false
        overlays.isUserInteractionEnabled = false
        overlays.isHidden = true
        view.addSubview(overlays)
        
        NSLayoutConstraint.activate([
            profileImageView.topAnchor.constraint(equalTo: view.layoutMarginsGuide.topAnchor, constant: 10),
            profileImageView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            profileImageView.heightAnchor.constraint(equalTo: view.heightAnchor, multiplier: 0.30),
            profileImageView.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.50)
        ])
        
        NSLayoutConstraint.activate([
            nameLabel.topAnchor.constraint(equalTo: profileImageView.topAnchor, constant: 10),
            nameLabel.leadingAnchor.constraint(equalTo: profileImageView.trailingAnchor, constant: 15),
            nameLabel.trailingAnchor.constraint(equalTo: view.trailingAnchor)
        ])
        
        NSLayoutConstraint.activate([
            dateLabel.topAnchor.constraint(equalTo: nameLabel.bottomAnchor, constant: 5),
            dateLabel.leadingAnchor.constraint(equalTo: profileImageView.trailingAnchor, constant: 15),
            dateLabel.trailingAnchor.constraint(equalTo: view.trailingAnchor)
        ])
        
        NSLayoutConstraint.activate([
            descriptionLabel.topAnchor.constraint(equalTo: dateLabel.bottomAnchor, constant: 5),
            descriptionLabel.leadingAnchor.constraint(equalTo: profileImageView.trailingAnchor, constant: 10),
            descriptionLabel.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            descriptionLabel.bottomAnchor.constraint(equalTo: profileImageView.bottomAnchor, constant: -10)
        ])
        
        NSLayoutConstraint.activate([
            createdByLabel.topAnchor.constraint(equalTo: profileImageView.bottomAnchor, constant: 10),
            createdByLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 10),
            createdByLabel.trailingAnchor.constraint(equalTo: view.trailingAnchor),
        ])
        
        NSLayoutConstraint.activate([
            collectionView.topAnchor.constraint(equalTo: createdByLabel.bottomAnchor, constant: 20),
            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 10),
            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -10),
            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
        
        NSLayoutConstraint.activate([
            overlays.topAnchor.constraint(equalTo: view.topAnchor),
            overlays.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            overlays.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            overlays.leadingAnchor.constraint(equalTo: view.leadingAnchor)
        ])
    }

}

// MARK: Protocol Collection View
extension DetailViewController: UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if TypeMovie == true {
            guard let movies = detailMovies?.productionCompanies.count else {return 0}
            return movies
        }else{
            guard let tv = detailDataTv?.createdBy.count else {return 0}
            return tv
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: HomeCollectionViewCell.identifier, for: indexPath) as! HomeCollectionViewCell
        if TypeMovie == true {
            let movies = detailMovies?.productionCompanies[indexPath.row]
            cell.setupDetailMovie(data: movies)
        }else{
            let tv = detailDataTv?.createdBy[indexPath.row]
            cell.setupDetailTV(data: tv)
        }
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        print("User tapped on item \(indexPath.row)")
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        let width = itemWidth(for: view.frame.width - 40, spacing: 0)
        
        return CGSize(width: width, height: itemHeight)
    }
    
    func itemWidth(for width: CGFloat, spacing: CGFloat) -> CGFloat {
        let itemsInRow: CGFloat = 3
        
        let totalSpacing: CGFloat = 2 * spacing + (itemsInRow - 1) * spacing
        let finalWidth = (width - totalSpacing) / itemsInRow
        
        return finalWidth - 5.0
    }
}

