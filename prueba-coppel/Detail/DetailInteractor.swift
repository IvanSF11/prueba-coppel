//
//  DetailInteractor.swift
//  prueba-coppel
//
//  Created Pedro Soriano on 28/09/22.
//  Copyright © 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class DetailInteractor: DetailInteractorProtocol {
    
    private let apiKey = "e00065673fed8cfa9e337ca04422cd53"
    private let baseAPIURL = "https://api.themoviedb.org/3"
    private let urlSession = URLSession.shared
    
    private let jsonDecoder: JSONDecoder = {
        let jsonDecoder = JSONDecoder()
        jsonDecoder.keyDecodingStrategy = .convertFromSnakeCase
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-mm-dd"
        jsonDecoder.dateDecodingStrategy = .formatted(dateFormatter)
        return jsonDecoder
    }()

    weak var presenter: DetailPresenterProtocol?
    
    func fetchTV(id: Int) {
        guard var urlComponents = URLComponents(string: "\(baseAPIURL)/tv/\(id)") else {
            errorService()
            return
        }
        let queryItems = [URLQueryItem(name: "api_key", value: apiKey)]
        urlComponents.queryItems = queryItems
        
        guard let url = urlComponents.url else {
            self.errorService()
            return
        }
        urlSession.dataTask(with: url) { (data, response, error) in
            if error != nil {
                self.errorService()
                return
            }
            
            guard let httpResponse = response as? HTTPURLResponse, 200..<300 ~= httpResponse.statusCode else {
                self.errorService()
                return
            }
            
            guard let data = data else {
                self.errorService()
                return
            }
            
            do {
                let response = try self.jsonDecoder.decode(DetailTV.self, from: data)
                DispatchQueue.main.async { [weak self] in
                    print(response)
                    self?.presenter?.responseTvDetail(data: response)
                }
            } catch {
                self.errorService()
            }
        }.resume()
        
    }
    
    func fetchMovie(id: Int) {
        guard var urlComponents = URLComponents(string: "\(baseAPIURL)/movie/\(id)") else {
            errorService()
            return
        }
        let queryItems = [URLQueryItem(name: "api_key", value: apiKey)]
        urlComponents.queryItems = queryItems
        
        guard let url = urlComponents.url else {
            self.errorService()
            return
        }
        urlSession.dataTask(with: url) { (data, response, error) in
            if error != nil {
                self.errorService()
                return
            }
            
            guard let httpResponse = response as? HTTPURLResponse, 200..<300 ~= httpResponse.statusCode else {
                self.errorService()
                return
            }
            
            guard let data = data else {
                self.errorService()
                return
            }
            
            do {
                let response = try self.jsonDecoder.decode(DetailMovie.self, from: data)
                DispatchQueue.main.async { [weak self] in
                    print(response)
                    self?.presenter?.responseMovieDetail(data: response)
                }
            } catch {
                self.errorService()
            }
        }.resume()
        
    }
    
    private func errorService(){
        presenter?.showError(title: "unable to connect to the service")
    }
}
