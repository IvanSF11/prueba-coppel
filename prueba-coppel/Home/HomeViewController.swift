//
//  HomeViewController.swift
//  prueba-coppel
//
//  Created Pedro Soriano on 27/09/22.
//  Copyright © 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import FirebaseAuth

class HomeViewController: UIViewController, HomeViewProtocol {
    
    //MARK: Properties
    var presenter: HomePresenterProtocol?
    let overlays = ViewOverlay()
    var dataMovies: MoviesResponse?
    var dataTV: TVResponse?
    var TypeMovie: Bool?
    var localData: [MoviesValue]?
    
    lazy var menuButton: UIButton = {
        let button = UIButton()
        button.setImage(UIImage(named: "menu.png", in: Bundle(for: HomeViewController.self), compatibleWith: nil), for: .normal)
        button.addTarget(self, action: #selector(menuAction), for: .touchUpInside)
        return button
    }()
    
    lazy var segmentedControl: UISegmentedControl = {
        let segmentItems = ["Popular", "Top Rated", "On TV", "Airing Today"]
        let control = UISegmentedControl(items: segmentItems)
        control.addTarget(self, action: #selector(segmentControl(_:)), for: .valueChanged)
        control.selectedSegmentIndex = 0
        control.selectedSegmentTintColor = .gray
        control.setTitleTextAttributes([NSAttributedString.Key.foregroundColor: UIColor.white], for: UIControl.State.normal)
        control.backgroundColor = UIColor(red: 0.09, green: 0.13, blue: 0.15, alpha: 1.00)
        control.translatesAutoresizingMaskIntoConstraints = false
        return control
    }()
    
    lazy var collectionView: UICollectionView = {
        let viewLayout = UICollectionViewFlowLayout()
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: viewLayout)
        collectionView.backgroundColor = .backgColor
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        return collectionView
    }()
    
    // MARK: Life Cycle
    override func viewDidLoad() {
        super.viewDidLoad()
        startLoadingView()
        presenter?.fetchMovies(type: .popular)
        presenter?.initDateBase()
        localData = presenter?.getDatabaseData()
        setView()
        setConstraints()
        setCollectionView()
    }
    
    private func setView(){
        view.backgroundColor = .backgColor
        title = "TV Shows"
        navigationController?.navigationBar.barStyle = UIBarStyle.black
        navigationController?.navigationBar.tintColor = .white
        navigationController?.navigationBar.barTintColor = UIColor(red: 0.19, green: 0.22, blue: 0.23, alpha: 1.00)
        navigationItem.rightBarButtonItem = UIBarButtonItem(customView: menuButton)
        navigationItem.setHidesBackButton(true, animated: true)
    }
    
    // MARK: Set CollectionView
    private func setCollectionView(){
        collectionView.dataSource = self
        collectionView.delegate = self
        collectionView.register(HomeCollectionViewCell.self, forCellWithReuseIdentifier: HomeCollectionViewCell.identifier)
    }
    
    // MARK: Add Constraints
    private func setConstraints(){
        view.addSubview(segmentedControl)
        view.addSubview(collectionView)
        overlays.translatesAutoresizingMaskIntoConstraints = false
        overlays.isUserInteractionEnabled = false
        overlays.isHidden = true
        view.addSubview(overlays)
        
        NSLayoutConstraint.activate([
            segmentedControl.topAnchor.constraint(equalTo: view.layoutMarginsGuide.topAnchor),
            segmentedControl.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            segmentedControl.trailingAnchor.constraint(equalTo: view.trailingAnchor),
        ])
        
        NSLayoutConstraint.activate([
            collectionView.topAnchor.constraint(equalTo: segmentedControl.bottomAnchor, constant: 10),
            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 10),
            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -10),
            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
        
        NSLayoutConstraint.activate([
            overlays.topAnchor.constraint(equalTo: view.topAnchor),
            overlays.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            overlays.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            overlays.leadingAnchor.constraint(equalTo: view.leadingAnchor)
        ])
    }
    
    //MARK: Show and Hiden Lottie
    func startLoadingView() {
        overlays.startLoadingView()
    }
    
    func finishLoadingView() {
        overlays.finishLoadingView()
    }
    
    
    //MARK: Show Menu
    @objc
    func menuAction() {
        createAlertMenu()
    }
    
    //MARK: Show Alert
    func createAlertMenu(){
        let actionSheetController = UIAlertController(title: "", message: "What do you want to do", preferredStyle: .actionSheet)

        let cancelActionButton = UIAlertAction(title: "Cancel", style: .cancel) { action -> Void in
        }
        actionSheetController.addAction(cancelActionButton)

        let saveActionButton = UIAlertAction(title: "View profile", style: .default) { action -> Void in
            self.presenter?.goToProfile()
        }
        actionSheetController.addAction(saveActionButton)

        let deleteActionButton = UIAlertAction(title: "Log out", style: .default) { action -> Void in
            self.LogOut()
        }
        actionSheetController.addAction(deleteActionButton)
        self.present(actionSheetController, animated: true, completion: nil)
    }
    
    private func LogOut(){
        let firebaseAuth = Auth.auth()
        do {
            try firebaseAuth.signOut()
        } catch _ as NSError {
            showAlert(title: "warning", message: "problem logging out")
        }
    }
    
    //MARK: Segmented Control Action
    @objc
    func segmentControl(_ segmentedControl: UISegmentedControl) {
        switch (segmentedControl.selectedSegmentIndex) {
        case 0:
            startLoadingView()
            presenter?.fetchMovies(type: .popular)
        case 1:
            startLoadingView()
            presenter?.fetchMovies(type: .topRated)
        case 2:
            startLoadingView()
            presenter?.fetchTV(type: .onTv)
        case 3:
            startLoadingView()
            presenter?.fetchTV(type: .airingToday)
        default:
            break
        }
    }
    
    // MARK: Response Service
    func responseMovies(data: MoviesResponse){
        TypeMovie = true
        dataMovies = data
        collectionView.reloadData()
        finishLoadingView()
    }
    
    func responseTV(data: TVResponse){
        TypeMovie = false
        dataTV = data
        collectionView.reloadData()
        finishLoadingView()
    }
    
    func showError(title: String){
        finishLoadingView()
        showAlert(title: "warning", message: title)
    }
    
}

// MARK: Protocol Collection View
extension HomeViewController: UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if TypeMovie == true {
            guard let movies = dataMovies?.results.count else {return 0}
            return movies
        }else{
            guard let tv = dataTV?.results?.count else {return 0}
            return tv
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: HomeCollectionViewCell.identifier, for: indexPath) as! HomeCollectionViewCell
        if TypeMovie == true {
            let movies = dataMovies?.results[indexPath.row]
            cell.setup(data: movies, localData: localData)
        }else{
            let tv = dataTV?.results?[indexPath.row]
            cell.setupTV(data: tv, localData: localData)
        }
        cell.favImage.tag = indexPath.row
        cell.delegate = self
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        print("User tapped on item \(indexPath.row)")
        if TypeMovie == true {
            let movie = dataMovies?.results[indexPath.row]
            presenter?.goToDetailMovies(id: movie?.id, movie: TypeMovie)
        }else{
            let tv = dataTV?.results?[indexPath.row]
            presenter?.goToDetailTV(id: tv?.id, movie: TypeMovie)
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        let width = itemWidth(for: view.frame.width - 20, spacing: 0)
        
        return CGSize(width: width, height: LayoutConstant.itemHeight)
    }
    
    func itemWidth(for width: CGFloat, spacing: CGFloat) -> CGFloat {
        let itemsInRow: CGFloat = 2
        
        let totalSpacing: CGFloat = 2 * spacing + (itemsInRow - 1) * spacing
        let finalWidth = (width - totalSpacing) / itemsInRow
        
        return finalWidth - 5.0
    }
}

extension HomeViewController: delegateHomeViewCell {
    func imageTaped(index: Int, type: String) {
        if type == "movie" {
            let movie = dataMovies?.results[index]
            let value = MoviesValue(id: "\(movie?.id ?? 0)", title: movie?.title ?? "", posterPath: "\(movie?.posterPath ?? "")", overview: movie?.overview ?? "", releaseDate: "\(movie?.releaseDate ?? Date())", voteAverage: "\(movie?.voteAverage ?? 0.0)", type: type)
            self.presenter?.updateDatabase(value)
        }else {
            let movie = dataTV?.results?[index]
            let value = MoviesValue(id: "\(movie?.id ?? 0)", title: movie?.name ?? "", posterPath: "\(movie?.posterPath ?? "")", overview: movie?.overview ?? "", releaseDate: "\(movie?.firstAirDate ?? Date())", voteAverage: "\(movie?.voteAverage ?? 0.0)", type: type)
            self.presenter?.updateDatabase(value)
        }
    }
    
    func imageNotTaped(index: Int, type: String){
        if type == "movie" {
            let movie = dataMovies?.results[index]
            self.presenter?.deleteRowData(movie?.id ?? 0)
        }else {
            let movie = dataTV?.results?[index]
            self.presenter?.deleteRowData(movie?.id ?? 0)
        }
    }
}
