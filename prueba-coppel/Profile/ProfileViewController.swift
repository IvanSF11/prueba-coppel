//
//  ProfileViewController.swift
//  prueba-coppel
//
//  Created Pedro Soriano on 28/09/22.
//  Copyright © 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class ProfileViewController: UIViewController, ProfileViewProtocol {
    //MARK: Properties
	var presenter: ProfilePresenterProtocol?
    
    var dataMovies: [MoviesValue]?
    
    lazy var profileImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.image = UIImage(named: "no-user.jpeg", in: Bundle(for: ProfileViewController.self), compatibleWith: nil)
        imageView.layer.cornerRadius = 50
        imageView.layer.masksToBounds = true
        imageView.translatesAutoresizingMaskIntoConstraints = false
        return imageView
    }()
    
    lazy var nameLabel: UILabel = {
        let label = UILabel()
        label.textColor = .labelColor
        label.font = UIFont.systemFont(ofSize: 15.0)
        label.lineBreakMode = .byWordWrapping
        label.numberOfLines = 2
        label.text = "Ivan Soriano Flores"
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    lazy var titleLabel: UILabel = {
        let label = UILabel()
        label.textColor = .labelColor
        label.font = UIFont.systemFont(ofSize: 20.0)
        label.text = "Favorite Shows"
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    lazy var collectionView: UICollectionView = {
        let viewLayout = UICollectionViewFlowLayout()
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: viewLayout)
        collectionView.backgroundColor = .backgColor
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        return collectionView
    }()

    // MARK: Life Cycle
	override func viewDidLoad() {
        super.viewDidLoad()
        dataMovies = presenter?.getDatabaseData()
        setConstraints()
        setView()
        setCollectionView()
        addGestureImage()
    }
    
    private func setView(){
        view.backgroundColor = .backgColor
        title = "Profile"
        navigationController?.navigationBar.barStyle = UIBarStyle.black
        navigationController?.navigationBar.tintColor = .labelColor
        navigationController?.navigationBar.barTintColor = .backgColor
    }
    
    // MARK: Set CollectionView
    private func setCollectionView(){
        collectionView.dataSource = self
        collectionView.delegate = self
        collectionView.register(HomeCollectionViewCell.self, forCellWithReuseIdentifier: HomeCollectionViewCell.identifier)
    }
    
    
    // MARK: Add Constraints
    private func setConstraints(){
        view.addSubview(profileImageView)
        view.addSubview(nameLabel)
        view.addSubview(titleLabel)
        view.addSubview(collectionView)
        
        NSLayoutConstraint.activate([
            profileImageView.topAnchor.constraint(equalTo: view.layoutMarginsGuide.topAnchor, constant: 20),
            profileImageView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            profileImageView.heightAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.40),
            profileImageView.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.40)
        ])

        NSLayoutConstraint.activate([
            nameLabel.centerYAnchor.constraint(equalTo: profileImageView.centerYAnchor),
            nameLabel.leadingAnchor.constraint(equalTo: profileImageView.trailingAnchor, constant: 10),
            nameLabel.trailingAnchor.constraint(equalTo: view.trailingAnchor)
        ])
        
        NSLayoutConstraint.activate([
            titleLabel.topAnchor.constraint(equalTo: profileImageView.bottomAnchor, constant: 20),
            titleLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 10),
            titleLabel.trailingAnchor.constraint(equalTo: view.trailingAnchor)
        ])
        
        NSLayoutConstraint.activate([
            collectionView.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 20),
            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 10),
            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -10),
            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
        
    }
    
    //MARK: Add Gesture Image Favorite
    func addGestureImage(){
        let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(imageTapped(tapGestureRecognizer:)))
        profileImageView.isUserInteractionEnabled = true
        profileImageView.addGestureRecognizer(tapGestureRecognizer)
    }
    
    @objc func imageTapped(tapGestureRecognizer: UITapGestureRecognizer)
    {
        #if targetEnvironment(simulator)
            errorCameraAlert()
        #else
            openCamera()
        #endif
    }
    
    private func openCamera(){
        let cameraController = UIImagePickerController()
        cameraController.sourceType = .camera
        cameraController.delegate = self
        cameraController.cameraDevice = .front
        self.present(cameraController, animated: true)
    }
    
    private func errorCameraAlert() {
        let alert = UIAlertController(title: "Aviso", message: "No se puede abrir la camara en un simulador, cambia a un dispositivo.", preferredStyle: .alert)
        let okButton = UIAlertAction(title: "OK", style: .default) { _ in
            alert.dismiss(animated: true)
        }
        alert.addAction(okButton)
        self.present(alert, animated: true)
    }

}


// MARK: Protocol Collection View
extension ProfileViewController: UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        guard let movies = dataMovies?.count else {return 0}
        return movies
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: HomeCollectionViewCell.identifier, for: indexPath) as! HomeCollectionViewCell
        let data = dataMovies?[indexPath.row]
        cell.setupDetailMovie(data: data)
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let data = dataMovies?[indexPath.row]
        let type = data?.type == "movie" ? true : false
        presenter?.goToDetail(id: Int(data?.id ?? ""), movie: type)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        let width = itemWidth(for: view.frame.width - 20, spacing: 0)
        
        return CGSize(width: width, height: LayoutConstant.itemHeight)
    }
    
    func itemWidth(for width: CGFloat, spacing: CGFloat) -> CGFloat {
        let itemsInRow: CGFloat = 2
        
        let totalSpacing: CGFloat = 2 * spacing + (itemsInRow - 1) * spacing
        let finalWidth = (width - totalSpacing) / itemsInRow
        
        return finalWidth - 5.0
    }
}

// MARK: Protocol Camera
extension ProfileViewController: UINavigationControllerDelegate, UIImagePickerControllerDelegate {
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey: Any]) {
        if let uiImage = info[.originalImage] as? UIImage {
            profileImageView.image = uiImage
        }
        dismiss(animated: true)
    }
}
